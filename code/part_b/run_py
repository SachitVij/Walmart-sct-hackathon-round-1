import pandas as pd
from geopy.distance import geodesic
import os

def calculate_distance(coord1, coord2):
    return geodesic(coord1, coord2).kilometers

def find_next_closest_node(current_node, nodes, visited):
    min_distance = float('inf')
    next_node = None
    for node in nodes:
        if node not in visited:
            distance = calculate_distance(current_node, node)
            if distance < min_distance:
                min_distance = distance
                next_node = node
    return next_node, min_distance

def optimize_route_for_vehicle(orders, depot_coord):
    visited = {depot_coord: 0}
    current_node = depot_coord
    sequence = []
    total_distance = 0
    while len(visited) <= len(orders):
        next_node, distance = find_next_closest_node(current_node, orders.keys(), visited)
        if next_node is None:
            distance = calculate_distance(current_node, depot_coord)
        total_distance += distance
        sequence.append(next_node)
        visited[next_node] = len(visited)
        current_node = next_node
    total_distance += calculate_distance(current_node, depot_coord)
    return sequence, total_distance

def process_dataset(input_file, output_file):
    df = pd.read_csv(input_file)
    depot_coord = (df.iloc[0]['depot_lat'], df.iloc[0]['depot_lng'])
    order_coords = {(row['lat'], row['lng']): row['order_id'] for index, row in df.iterrows()}

    vehicle_capacity = len(order_coords) // 2
    vehicle_assignments = {1: {}, 2: {}}
    vehicle_distances = {}

    for idx, (coord, order_id) in enumerate(order_coords.items(), 1):
        vehicle_num = 1 if idx <= vehicle_capacity else 2
        vehicle_assignments[vehicle_num][coord] = order_id
    
    output = []
    for vehicle_num, orders in vehicle_assignments.items():
        route_sequence, distance = optimize_route_for_vehicle(orders, depot_coord)
        vehicle_distances[vehicle_num] = distance
        for seq_num, coord in enumerate(route_sequence, 1):
            order_id = orders.get(coord)
            if order_id:
                output.append([order_id, coord[1], coord[0], depot_coord[1], depot_coord[0], vehicle_num, seq_num])
    
    df_output = pd.DataFrame(output, columns=['order_id', 'lng', 'lat', 'depot_lat', 'depot_lng', 'vehicle_num', 'dlvr_seq_num'])
    df_output.to_csv(output_file, index=False)
    return vehicle_distances

def main(input_dir='input_datasets/part_b', output_dir='output_datasets/part_b'):
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    distances_summary = []

    for file_name in sorted(os.listdir(input_dir)):
        if file_name.startswith("part_b_input_dataset_") and file_name.endswith(".csv"):
            input_file_path = os.path.join(input_dir, file_name)
            output_file_name = f"part_b_output_dataset_{file_name.split('_')[-1]}"
            output_file_path = os.path.join(output_dir, output_file_name)
            vehicle_distances = process_dataset(input_file_path, output_file_path)
            print(f"Processed {input_file_path} -> {output_file_path}")

            total_distance = sum(vehicle_distances.values())
            distances_summary.append([output_file_name.replace('.csv', ''), 
                                      f"{vehicle_distances.get(1, 0)} kms", 
                                      f"{vehicle_distances.get(2, 0)} kms", 
                                      f"{total_distance} kms"])

    summary_df = pd.DataFrame(distances_summary, columns=['Dataset', 'Vehicle 1 Route Distance', 'Vehicle 2 Route Distance', 'Total Distance travelled across vehicle to deliver all orders'])
    summary_df.to_csv('output_datasets/part_b/part_b_routes_distance_travelled.csv', index=False)

if __name__ == "__main__":
    main()
